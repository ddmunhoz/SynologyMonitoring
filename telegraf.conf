# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply prepend
# them with $. For strings the variable must be within quotes (ie, "$STR_VAR"),
# for numbers and booleans they should be plain (ie, $INT_VAR, $BOOL_VAR)


# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"


# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
  ## output, and will flush this buffer on a successful write. Oldest metrics
  ## are dropped first when this buffer fills.
  ## This buffer only fills when writes fail to output plugin(s).
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Logging configuration:
  ## Run telegraf with debug log messages.
  debug = false
  ## Run telegraf in quiet mode (error log messages only).
  quiet = false
  ## Specify the log file name. The empty string means to log to stderr.
  logfile = ""

  ## Override default hostname, if empty use os.Hostname()
  hostname = "NARS"
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = true


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for sending metrics to InfluxDB
[[outputs.influxdb]]
  ## The full HTTP or UDP URL for your InfluxDB instance.
  ##
  ## Multiple URLs can be specified for a single cluster, only ONE of the
  ## urls will be written to each interval.
  # urls = ["unix:///var/run/influxdb.sock"]
  # urls = ["udp://127.0.0.1:8089"]
#urls = ["http://172.30.0.4:8086"]
urls = ["http://172.17.0.1:8086"]

  



###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

# Read metrics about cpu usage
[[inputs.cpu]]
  name_override = "NARS.Local.CPUS"
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics.
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states.
  report_active = false


# Read metrics about disk usage by mount point
[[inputs.disk]]
  name_override = "NARS.Local.DISKS"
  ## By default stats will be gathered for all mount points.
  ## Set mount_points will restrict the stats to only the specified mount points.
  # mount_points = ["/"]

  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs"]


# Read metrics about disk IO by device
[[inputs.diskio]]
  name_override = "NARS.Local.DISKS"
  ## By default, telegraf will gather stats for all devices including
  ## disk partitions.
  ## Setting devices will restrict the stats to the specified devices.
  # devices = ["sda", "sdb", "vd*"]
  ## Uncomment the following line if you need disk serial numbers.
  # skip_serial_number = false
  #
  ## On systems which support it, device metadata can be added in the form of
  ## tags.
  ## Currently only Linux is supported via udev properties. You can view
  ## available properties for a device by running:
  ## 'udevadm info -q property -n /dev/sda'
  # device_tags = ["ID_FS_TYPE", "ID_FS_USAGE"]
  #
  ## Using the same metadata source as device_tags, you can also customize the
  ## name of the device via templates.
  ## The 'name_templates' parameter is a list of templates to try and apply to
  ## the device. The template may contain variables in the form of '$PROPERTY' or
  ## '${PROPERTY}'. The first template which does not contain any variables not
  ## present for the device is used as the device name tag.
  ## The typical use case is for LVM volumes, to get the VG/LV name instead of
  ## the near-meaningless DM-0 name.
  # name_templates = ["$ID_FS_LABEL","$DM_VG_NAME/$DM_LV_NAME"]


# Get kernel statistics from /proc/stat
[[inputs.kernel]]
  name_override = "NARS.Local.System.Kernel"
  # no configuration


# Read metrics about memory usage
[[inputs.mem]]
name_override = "NARS.Local.System.Mem"
  # no configuration


# Get the number of processes and group them by status
[[inputs.processes]]
  name_override = "NARS.Local.System.Processes"
  # no configuration


# Read metrics about swap memory usage
[[inputs.swap]]
  name_override = "NARS.Local.System.Swap"
  # no configuration


# Read metrics about system load & uptime
[[inputs.system]]
  name_override = "NARS.Local.System"
  # no configuration


# # Read metrics about docker containers
[[inputs.docker]]
  name_override = "NARS.Local.Docker"
#   ## Docker Endpoint
#   ##   To use TCP, set endpoint = "tcp://[ip]:[port]"
#   ##   To use environment variables (ie, docker-machine), set endpoint = "ENV"
	endpoint = "unix:///var/run/docker.sock"
#   endpoint = "localhost:2375"
#	endpoint = "ENV"
#
#   ## Set to true to collect Swarm metrics(desired_replicas, running_replicas)
#   gather_services = false
#
#   ## Only collect metrics for these containers, collect all if empty
   container_names = []
#
#   ## Containers to include and exclude. Globs accepted.
#   ## Note that an empty array for both will include all containers
#   container_name_include = []
#   container_name_exclude = []
#
#   ## Container states to include and exclude. Globs accepted.
#   ## When empty only containers in the "running" state will be captured.
#   # container_state_include = []
#   # container_state_exclude = []
#
#   ## Timeout for docker list, info, and stats commands
   timeout = "5s"


#NARS Monitoring

#DISKS
[[inputs.snmp]]
  agents = [ "172.17.0.1:161" ]
  version = 2
  community = "public"
  name = "NARS.Remote.Disks"
  interval = "30s"
  timeout = "10s"
  retries = 3


[[inputs.snmp.table]]
	name = "NARS.Remote.Volumes"
	oid = "SYNOLOGY-SPACEIO-MIB::spaceIOTable"

	[[inputs.snmp.table.field]]
			name = "spaceIODevice"
			oid = "SYNOLOGY-SPACEIO-MIB::spaceIODevice"
			is_tag = true	
	[[inputs.snmp.table.field]]
			name = "spaceIONWritten"
			oid = "SYNOLOGY-SPACEIO-MIB::spaceIONWritten"
	[[inputs.snmp.table.field]]
			name = "spaceIOReads"
			oid = "SYNOLOGY-SPACEIO-MIB::spaceIOReads"
	[[inputs.snmp.table.field]]
			name = "spaceIOWrites"
			oid = "SYNOLOGY-SPACEIO-MIB::spaceIOWrites"
	[[inputs.snmp.table.field]]
			name = "spaceIOLA"
			oid = "SYNOLOGY-SPACEIO-MIB::spaceIOLA"
	[[inputs.snmp.table.field]]
			name = "spaceIOLA1"
			oid = "SYNOLOGY-SPACEIO-MIB::spaceIOLA1"
	[[inputs.snmp.table.field]]
			name = "spaceIOLA5"
			oid = "SYNOLOGY-SPACEIO-MIB::spaceIOLA5"
	[[inputs.snmp.table.field]]
			name = "spaceIOLA15"
			oid = "SYNOLOGY-SPACEIO-MIB::spaceIOLA15"
	[[inputs.snmp.table.field]]
			name = "spaceIONReadX"
			oid = "SYNOLOGY-SPACEIO-MIB::spaceIONReadX"
	[[inputs.snmp.table.field]]
			name = "spaceIONWrittenX"
			oid = "SYNOLOGY-SPACEIO-MIB::spaceIONWrittenX"

[[inputs.snmp.table]]
	name = "NARS.Remote.Disks"
	oid = "SYNOLOGY-DISK-MIB::diskTable"

	[[inputs.snmp.table.field]]
			name = "diskID"
			oid = "SYNOLOGY-DISK-MIB::diskID"
			is_tag = true	
	[[inputs.snmp.table.field]]
			name = "diskModel"
			oid = "SYNOLOGY-DISK-MIB::diskModel"			
	[[inputs.snmp.table.field]]
			name = "diskType"
			oid = "SYNOLOGY-DISK-MIB::diskType"
			is_tag = true
	[[inputs.snmp.table.field]]
			name = "diskStatus"
			oid = "SYNOLOGY-DISK-MIB::diskStatus"			
	[[inputs.snmp.table.field]]
			name = "diskTemperature"
			oid = "SYNOLOGY-DISK-MIB::diskTemperature"					

	[[inputs.snmp.field]]
		name = "NarsRaidStatus"
		oid = "SYNOLOGY-RAID-MIB::raidStatus.0"		

	

	[[inputs.snmp.table]]
	name = "NARS.Remote.Disks.IOPS"
	oid = "SYNOLOGY-STORAGEIO-MIB::storageIOTable"

	[[inputs.snmp.table.field]]
			name = "storageIODevice"
			oid = "SYNOLOGY-STORAGEIO-MIB::storageIODevice"
			is_tag = true	
	[[inputs.snmp.table.field]]
			name = "storageIONRead"
			oid = "SYNOLOGY-STORAGEIO-MIB::storageIONRead"
	[[inputs.snmp.table.field]]
			name = "storageIONWritten"
			oid = "SYNOLOGY-STORAGEIO-MIB::storageIONWritten"
	[[inputs.snmp.table.field]]
			name = "storageIOReads"
			oid = "SYNOLOGY-STORAGEIO-MIB::storageIOReads"
	[[inputs.snmp.table.field]]
			name = "storageIOWrites"
			oid = "SYNOLOGY-STORAGEIO-MIB::storageIOWrites"
	[[inputs.snmp.table.field]]
			name = "storageIOLA"
			oid = "SYNOLOGY-STORAGEIO-MIB::storageIOLA"
	[[inputs.snmp.table.field]]
			name = "storageIOLA1"
			oid = "SYNOLOGY-STORAGEIO-MIB::storageIOLA1"
	[[inputs.snmp.table.field]]
			name = "storageIOLA5"
			oid = "SYNOLOGY-STORAGEIO-MIB::storageIOLA5"
	[[inputs.snmp.table.field]]
			name = "storageIOLA5"
			oid = "SYNOLOGY-STORAGEIO-MIB::storageIOLA5"
	[[inputs.snmp.table.field]]
			name = "storageIOLA15"
			oid = "SYNOLOGY-STORAGEIO-MIB::storageIOLA15"
	[[inputs.snmp.table.field]]
			name = "storageIONReadX"
			oid = "SYNOLOGY-STORAGEIO-MIB::storageIONReadX"
	[[inputs.snmp.table.field]]
			name = "storageIONWrittenX"
			oid = "SYNOLOGY-STORAGEIO-MIB::storageIONWrittenX"		




#SYSTEM & Network
[[inputs.snmp]]
  agents = [ "172.17.0.1:161" ]
  version = 2
  community = "public"
  name = "NARS.Remote.System"
  interval = "30s"
  timeout = "10s"
  retries = 3

    [[inputs.snmp.table]]
		name = "NARS.Remote.Network.NICS"
		oid = "IF-MIB::ifXTable"
		
	[[inputs.snmp.table.field]]
		name = "ifName"
		oid = "IF-MIB::ifName"
		is_tag = true	

   	[[inputs.snmp.table.field]]
		name = "ifOperStatus"
		oid = "IF-MIB::ifOperStatus"
		is_tag = true 
	
	#Nars Service Info
	[[inputs.snmp.table]]
		name = "ServicesTest"
		oid = "SYNOLOGY-SERVICES-MIB::serviceTable"
		
	[[inputs.snmp.table.field]]
		name = "serviceName"
		oid = "SYNOLOGY-SERVICES-MIB::serviceName"
		is_tag = true	

   	[[inputs.snmp.table.field]]
		name = "serviceUsers"
		oid = "SYNOLOGY-SERVICES-MIB::serviceUsers"
		is_tag = true 

	#Nars Service Info

	[[inputs.snmp.field]]
			name = "NarsServiceStatusAFP"
			oid = "SYNOLOGY-SERVICES-MIB::serviceUsers.2"

	[[inputs.snmp.field]]
			name = "NarsServiceStatusCifs"
			oid = "SYNOLOGY-SERVICES-MIB::serviceUsers.1"

	[[inputs.snmp.field]]
			name = "NarsServiceStatusFTP"
			oid = "SYNOLOGY-SERVICES-MIB::serviceUsers.4"

	[[inputs.snmp.field]]
			name = "NarsServiceStatusHttp"
			oid = "SYNOLOGY-SERVICES-MIB::serviceUsers.6"

	[[inputs.snmp.field]]
			name = "NarsServiceStatusSSH"
			oid = "SYNOLOGY-SERVICES-MIB::serviceUsers.8"


    [[inputs.snmp.field]]
		name = "hostname"
		oid = "SNMPv2-MIB::sysName.0"
		is_tag = true	
	
	[[inputs.snmp.field]]
		name = "NarsUpTime"
		oid = "DISMAN-EVENT-MIB::sysUpTimeInstance"

	[[inputs.snmp.field]]
		name = "NarsHostTemperature"
		oid = "SYNOLOGY-SYSTEM-MIB::temperature.0"

	[[inputs.snmp.field]]
		name = "NarsHostFanStatus"
		oid = "SYNOLOGY-SYSTEM-MIB::systemFanStatus.0"

	[[inputs.snmp.field]]
		name = "NarsCpuFanStatus"
		oid = "SYNOLOGY-SYSTEM-MIB::cpuFanStatus.0"

	[[inputs.snmp.field]]
		name = "NarsOsVersion"
		oid = "SYNOLOGY-SYSTEM-MIB::version.0"

	[[inputs.snmp.field]]
		name = "NarsOsUpdateStatus"
		oid = "SYNOLOGY-SYSTEM-MIB::upgradeAvailable.0"

	[[inputs.snmp.field]]
		name = "NarsCpuFanStatus"
		oid = "SYNOLOGY-SYSTEM-MIB::cpuFanStatus.0"

	[[inputs.snmp.field]]
		name = "NarsPowerSupply"
		oid = "SYNOLOGY-SYSTEM-MIB::powerStatus.0"
		

	[[inputs.snmp.field]]
		name = "NarsUPSModel"
		oid = "SYNOLOGY-UPS-MIB::upsDeviceModel.0"

	[[inputs.snmp.field]]
		name = "NarsUPSStatus"
		oid = "SYNOLOGY-UPS-MIB::upsInfoStatus.0"

	[[inputs.snmp.field]]
		name = "NarsUPSLoad"
		oid = "SYNOLOGY-UPS-MIB::upsInfoLoadValue.0"

	[[inputs.snmp.field]]
		name = "NarsUPSBeeperStatus"
		oid = "SYNOLOGY-UPS-MIB::upsInfoBeeperStatus.0"

	[[inputs.snmp.field]]
		name = "NarsUPSBatteryLevelPercentage"
		oid = "SYNOLOGY-UPS-MIB::upsBatteryChargeValue.0"

	[[inputs.snmp.field]]
		name = "NarsUPSVoltage"
		oid = "SYNOLOGY-UPS-MIB::upsInputVoltageValue.0"

	[[inputs.snmp.field]]
		name = "NarsUPSVoltageNominal"
		oid = "SYNOLOGY-UPS-MIB::upsInputVoltageNominal.0"

	[[inputs.snmp.field]]
		name = "NarsUPSInputSensivity"
		oid = "SYNOLOGY-UPS-MIB::upsInputSensitivity.0"

	[[inputs.snmp.field]]
		name = "NarsUPSTransferReason"
		oid = "SYNOLOGY-UPS-MIB::upsInputTransferReason.0"
		
	[[inputs.snmp.field]]
		name = "NarsUPSBatteryDuration"
		oid = "SYNOLOGY-UPS-MIB::upsBatteryRuntimeValue.00"




#Synology rt2600ac
[[inputs.snmp]]
  agents = [ "10.0.0.1:161" ]
  version = 2
  community = "public"
  name = "OUTLAND.Remote.Network"
  interval = "30s"  
  timeout = "10s"
  retries = 3

    [[inputs.snmp.field]]
		name = "hostname"
		oid = "SNMPv2-MIB::sysName.0"
		is_tag = true	
	
		[[inputs.snmp.table]]
			name = "OUTLAND.Remote.Network"
			#inherit_tags = [ "hostname" ]
			oid = "IF-MIB::ifXTable"
		
		[[inputs.snmp.table.field]]
			name = "ifName"
			oid = "IF-MIB::ifName"
			is_tag = true	

   	[[inputs.snmp.table.field]]
			name = "ifOperStatus"
			oid = "IF-MIB::ifOperStatus"
			is_tag = true 
		